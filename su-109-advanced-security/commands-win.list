###############################################
#Prepare your local environment
###############################################
#If you do not have curl you can install it with the fiollowing commands or you can run the labs directly within the orbitera environment after connecting to it with your ssh client
# download curl : https://curl.haxx.se/dlwiz/?type=bin&os=Win64 
#set PATH=%PATH%;%HOMEPATH%\Downloads\curl-7.59.0\src\

# env | grep SCRIPT in DOS = set | findstr  SCRIPT_DIR

#keep your git directory in memory for latest command
set SCRIPT_DIR=%cd%

#here we assume your etc host has been changed to have jfrog.local going to your artifactory instance.
#in order to validate this you can run (expected result : OK) :

curl http://jfrog.local/artifactory/api/system/ping 

#save your password

set ADMIN_PASSWORD=<password>

################################################
#Let' start with Security
################################################

#list existing permisions targets

curl -uadmin:%ADMIN_PASSWORD% http://jfrog.local/artifactory/api/security/permissions

#delete default permissions target

curl -uadmin:%ADMIN_PASSWORD% -X DELETE http://jfrog.local/artifactory/api/security/permissions/Anything
curl -uadmin:%ADMIN_PASSWORD% -X DELETE http://jfrog.local/artifactory/api/security/permissions/Any%20Remote


#create a new group for dev team

curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local/artifactory/api/security/groups/dev-team -H "content-type: application/vnd.org.jfrog.artifactory.security.Group+json" -T %SCRIPT_DIR%/group.json

#create a new user
set USER_LOGIN=<SetUserName>

curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local/artifactory/api/security/users/%USER_LOGIN% -H "content-type: application/vnd.org.jfrog.artifactory.security.User+json" -T %SCRIPT_DIR%/user.json

################################################
#LDAP Integration
################################################
ssh admin@jfrog.local

#Login to Artifactory docekr registry provisioned for the training
sudo docker login jfrogtraining-docker.jfrog.io -u security-training -p password

#Pull openLDAP image from Artifactory
sudo docker pull jfrogtraining-docker.jfrog.io/soleng_openldap

#run the openLDAP container
sudo docker run -itd --name openldap -p 389:389 --network root_default jfrogtraining-docker.jfrog.io/soleng_openldap

#Populate the openLDAP with data
sudo docker exec openldap /init.sh


################################################
#Connect to LDAP 
################################################
#connect to LDAP (UI)
#import groups swampadmin and swampuser (UI)

#give admin privileges to swampadmin group
curl -uadmin:%ADMIN_PASSWORD% -X POST http://jfrog.local/artifactory/api/security/groups/swampadmin -H "content-type: application/vnd.org.jfrog.artifactory.security.Group+json" -T %SCRIPT_DIR%/group_admin.json

#Connect with frog_admin user (password = jfrog) (UI)

#generate frog_admin api key
curl -ufrog_admin:jfrog -X POST http://jfrog.local:8081/artifactory/api/security/apiKey 

#save it as a local variable
set ADMIN_KEY=<apiKey>

#Give deploy permission to swampdev group for generic-local repo
curl -H "X-Jfrog-Art-API:%ADMIN_KEY%" -X PUT http://jfrog.local:8094/artifactory/api/security/permissions/swampdev -H "content-type: application/vnd.org.jfrog.artifactory.security.PermissionTarget+json" -T %SCRIPT_DIR%/permission-target.json


################################################
#Establish a circle of trust
################################################
#check standalone 1 trusted store
docker exec -it  artifactory-standalone-1 ls -l /var/opt/jfrog/artifactory/access/etc/keys/trusted/

#check standalone 2 trusted store
docker exec -it  artifactory-standalone-2 ls -l /var/opt/jfrog/artifactory/access/etc/keys/trusted/

#get artifactory instances service_id
FOR /F "tokens=*" %a in ('curl -H "X-Jfrog-Art-API:%ADMIN_KEY%"  http://jfrog.local/artifactory/api/system/service_id') do SET id_main=%a

#for standalone instances we are not connected to LDAP => use default admin
FOR /F "tokens=*" %a in ('curl -uadmin:%ADMIN_PASSWORD%  http://jfrog.local:8094/artifactory/api/system/service_id') do SET id_s1=%a

FOR /F "tokens=*" %a in ('curl -uadmin:%ADMIN_PASSWORD%  http://jfrog.local:8095/artifactory/api/system/service_id') do SET id_s2=%a

#generate a refreshable token shared between the three instances
curl -H "X-Jfrog-Art-API:%ADMIN_KEY%" -X POST "http://jfrog.local/artifactory/api/security/token" -d "username=kermit" -d "scope=member-of-groups:swampdev" -d "audience=%id_main% %id_s1% %id_s2%" -d "refreshable=true"

#Result example
{
  "scope" : "member-of-groups:swampdev api:*",
  "access_token" :  "<TokenGenerated>",
  "refresh_token" : "<RefreshToken>",
  "expires_in" : 3600,
  "token_type" : "Bearer"
}

set token=<TokenGenerated>
set refresh=<RefreshToken>

#Test your token
curl -ukermit:%token% -T ./token.json http://jfrog.local/artifactory/generic-local/token.json

curl -H "Authorization: Bearer %token%" -T ./token.json http://jfrog.local:8095/artifactory/generic-local/token.json

#Previous command should failed as we do not have swampdev group and permission on this instance
#Create swampdev group on standalone instances (connect to LDAP and import group or run the following)

curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local:8094/artifactory/api/security/groups/swampdev -H "content-type: application/vnd.org.jfrog.artifactory.security.Group+json" -T %SCRIPT_DIR%/group.json

curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local:8095/artifactory/api/security/groups/swampdev -H "content-type: application/vnd.org.jfrog.artifactory.security.Group+json" -T %SCRIPT_DIR%/group.json

#Give deploy permission to swampdev group for generic-local repo
curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local:8094/artifactory/api/security/permissions/swampdev -H "content-type: application/vnd.org.jfrog.artifactory.security.PermissionTarget+json" -T %SCRIPT_DIR%/permission-target.json

curl -uadmin:%ADMIN_PASSWORD% -X PUT http://jfrog.local:8095/artifactory/api/security/permissions/swampdev -H "content-type: application/vnd.org.jfrog.artifactory.security.PermissionTarget+json" -T %SCRIPT_DIR%/permission-target.json

#test the token again
curl -H "Authorization: Bearer %token%" -T ./token.json http://jfrog.local:8095/artifactory/generic-local/token.json

#refresh token
curl -X POST "http://jfrog.local/artifactory/api/security/token" -d "grant_type=refresh_token" -d "refresh_token=%refresh%" -d "access_token=%token%" 

#revoke token
curl -H "X-Jfrog-Art-API:%ADMIN_KEY%"  -XPOST "http://jfrog.local/artifactory/api/security/token/revoke" -d "token=%token%"