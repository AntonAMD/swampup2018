#!/usr/bin/env groovy
import groovy.json.JsonSlurper

node {
    def jobList = ["step1-create-application-war-file-au","step2-create-docker-image-template-au","step3-create-docker-image-product-au","maven-example","data-generator-debian",
                   "data-generator-docker","data-generator-maven","data-generator-rpm"]

    git branch: 'beta',
       credentialsId: '3eb629b4-ca19-465e-95dd-531402ee6c5f',
       url: 'https://github.com/jfrogtraining/swampup2018'
    def namespace_us = "${env.NAMESPACE_US_DOMAIN}"
    def USSERVER_URL = "https://artifactory-${namespace_us}/artifactory"
    def USEDGE_URL = "https://artifactory-edge1-${namespace_us}/artifactory"
    def namespace_au =  "${env.NAMESPACE_AU_DOMAIN}"
    def AUEDGE_URL = "https://artifactory-edge2-${namespace_au}/artifactory"
    def AUSERVER_URL = "https://artifactory-${namespace_au}/artifactory"
    def namespace_in = "${env.NAMESPACE_IN_DOMAIN}"
    def INEDGE_URL = "https://artifactory-edge3-${namespace_in}/artifactory"
    def dockerUsURL = "docker-artifactory-${namespace_us}"
    def dockerAuURL = "docker-artifactory-${namespace_au}"

    createRepo(USSERVER_URL, "devopsautomation/setup/betalocalrepo.yaml")
    createRepo(USSERVER_URL, "devopsautomation/setup/betaremote.yaml")
    createRepo(AUSERVER_URL, "devopsautomation/setup/betalocalrepo.yaml")
    createRepo(AUSERVER_URL, "devopsautomation/setup/betaremote.yaml")

    createRepo(USEDGE_URL, "devopsautomation/setup/betalocalrepo.yaml")
    createRepo(AUEDGE_URL, "devopsautomation/setup/betalocalrepo.yaml")
    createRepo(INEDGE_URL, "devopsautomation/setup/betalocalrepo.yaml")
    unblockDownload (USSERVER_URL)
    unblockDownload (AUSERVER_URL)
    downloadDependencies(USSERVER_URL, dockerUsURL, dockerAuURL)
    downloadDependencies(AUSERVER_URL, dockerUsURL, dockerAuURL)

    jobList.each () {
      setNewBuildNumber("${it}")
    }
}

def createRepo (artUrl, yamlFile) {
    def curlString = "curl -uadmin:password ${artUrl}"
    def createRepoCmd = curlString +  "/api/system/configuration -X PATCH -H 'Content-Type: application/yaml' -T ${yamlFile}"
    sh createRepoCmd
}

def unblockDownload (artUrl) {
    def curlString = "curl -uadmin:password ${artUrl}"
    def createCmd = curlString +  "/api/xray/allowBlockedArtifactsDownload?allow=true -X POST"
    sh createCmd
    createCmd = curlString +  "/api/xray/allowDownloadWhenUnavailable?allow=true -X POST"
    sh createCmd
}

// to do- change the password to use Jenkins credentials for artifactory.
def downloadDependencies (serverurl, dockerUsURL, dockerAuURL) {
    sh 'curl -fL jfrog https://getcli.jfrog.io | sh'
    sh './jfrog rt c clear < /dev/null'
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: ARTTRAINING, usernameVariable: 'TRAININGUSERNAME', passwordVariable: 'TRAININGPASSWORD']]) {
        sh "./jfrog rt c training --url https://jfrogtraining.jfrog.io/jfrogtraining --user ${TRAININGUSERNAME} --password ${TRAININGPASSWORD} < /dev/null"
        sh "docker login jfrogtraining-docker.jfrog.io -u ${TRAININGUSERNAME} -p ${TRAININGPASSWORD}"
        sh 'docker pull jfrogtraining-docker.jfrog.io/qa/data/debian-generator:1.2'
        sh 'docker pull jfrogtraining-docker.jfrog.io/qa/data/docker-generator:1.2'
        sh 'docker pull jfrogtraining-docker.jfrog.io/qa/data/rpm-generator:1.2'
        sh 'docker pull jfrogtraining-docker.jfrog.io/qa/data/maven-generator:1.5'
    }

    sh './jfrog rt dl tomcat-local/org/apache/apache-tomcat/ ./ --server-id training'
    sh './jfrog rt dl tomcat-local/java/ ./ --server-id training'
    sh './jfrog rt dl generic-local/helm ./ --server-id training'

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        sh "./jfrog rt c beta --user ${USERNAME} --password ${PASSWORD} --url ${serverurl} < /dev/null"
        sh "docker login ${dockerAuURL} -u ${USERNAME} -p ${PASSWORD}"
        sh "docker tag jfrogtraining-docker.jfrog.io/qa/data/debian-generator:1.2 ${dockerAuURL}/qa/data/debian-generator:1.2"
        sh "docker tag jfrogtraining-docker.jfrog.io/qa/data/docker-generator:1.2 ${dockerAuURL}/qa/data/docker-generator:1.2"
        sh "docker tag jfrogtraining-docker.jfrog.io/qa/data/rpm-generator:1.2 ${dockerAuURL}/qa/data/rpm-generator:1.2"
        sh "docker tag jfrogtraining-docker.jfrog.io/qa/data/maven-generator:1.5 ${dockerAuURL}/qa/data/maven-generator:1.5"
        sh "docker push ${dockerAuURL}/qa/data/debian-generator:1.2"
        sh "docker push ${dockerAuURL}/qa/data/docker-generator:1.2"
        sh "docker push ${dockerAuURL}/qa/data/rpm-generator:1.2"
        sh "docker push ${dockerAuURL}/qa/data/maven-generator:1.5"
    }
    sh './jfrog rt u java/ tomcat-local/ --server-id beta --flat false'
    sh './jfrog rt u org/ tomcat-local/ --server-id beta --flat false'
    sh './jfrog rt u helm generic-local/helm --server-id beta --flat true'
    sh 'cp ./jfrog /usr/sbin/jfrog'
    sh 'cp helm /usr/sbin/helm'
    sh "chmod 777 /usr/sbin/helm"
}

def setNewBuildNumber (jobname) {
    def testing = build job: "${jobname}"
    def newBuildNumber = testing.getNumber() + 50
    def job = Jenkins.instance.getItem("${jobname}")
    job.nextBuildNumber = newBuildNumber
    job.saveNextBuildNumber()
}
