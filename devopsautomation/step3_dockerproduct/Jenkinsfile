#!/usr/bin/env groovy
import groovy.json.JsonSlurper

//
// Title: Build framelayer (Java and Apache) in docker container.
// Jenkins Parameters
// CREDENTIALS - Jenkins credentials to access artifactory
// NAMESPACEDOMAIN - domain name to use to create artifactory, xray, jfmc etc. url
// XRAY_SCAN - choice (YES | NO).  scan docker image
// TESTING - pretext to append to Jenkins build name

node {
    //Clone example project from GitHub repository
    git url: 'https://github.com/jfrogtraining/swampup', branch: 'orbitera'
    def WATCHNAME = env.JOB_NAME
    def jobName = env.JOB_NAME
    def domainName = jobName.matches("(.*)-au") ? "${env.NAMESPACE_AU_DOMAIN}":"${env.NAMESPACE_US_DOMAIN}"
    def namespace_domain = "${NAMESPACEDOMAIN}" ? "${NAMESPACEDOMAIN}":"${domainName}"
    println "Domain Used : " + namespace_domain

    def SERVER_URL = "https://artifactory-${namespace_domain}/artifactory"
    def XRAYURL = "https://xray-${namespace_domain}"
    def REPO = "docker"
    def PROMOTE_REPO = "docker-prod-local"
    def SOURCE_REPO = "docker-stage-local"
    def rtServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
    def buildInfo = Artifactory.newBuildInfo()
    def tagName
    def artdocker_registry = "${REPO}-artifactory-${namespace_domain}"
    def tagDockerApp
    def rtDocker = Artifactory.docker server: rtServer
    buildInfo.env.capture = true
    
    //Fetch all depedencies from Artifactory
    stage ('Dependencies') {
        currentBuild.displayName = TESTING + "-" + BUILD_NUMBER
        dir ('automation/docker-app') {
            try {
                println "Gather Released Docker Framework and Gradle War file"
                def gradleWarDownload = """{
                    "files": [
                      {
                        "pattern": "gradle-release-local/org/jfrog/example/gradle/webservice/1.1.2/*.war",
                        "target": "war/webservice.war",
                        "flat": "true"
                      }
                    ]
                 }"""
                rtServer.download(gradleWarDownload, buildInfo )
            } catch (Exception e) {
                println "Caught Exception during resolution. Message ${e.message}"
                throw e
            }
        }
    }

    //Build docker image named docker-app 
    stage ('Build & Deploy') {
        createXrayWatch (WATCHNAME, XRAYURL)
        dir ('automation/docker-app') {
            updateBaseDockerFile (artdocker_registry)
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                tagDockerApp = "${artdocker_registry}/docker-app:${env.BUILD_NUMBER}"
                docker.withRegistry ("https://${artdocker_registry}", CREDENTIALS) {
                      sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                      docker.build(tagDockerApp)
                }
                buildInfo = rtDocker.push(tagDockerApp, REPO, buildInfo)
                rtServer.publishBuildInfo buildInfo
             }
        }
     }

    //Test docker image
     stage ('Test') {
        dir('automation/docker-app/app-test') {

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh 'docker rmi '+tagDockerApp+' || true'
                def rtDockera = Artifactory.docker server: rtServer
                docker.withRegistry ("https://${artdocker_registry}", CREDENTIALS) {
                      sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                      sh "docker pull ${tagDockerApp}"
                }
            }
            if (testApp(tagDockerApp)) {
                  println "Setting property and promotion"
                  sh 'docker rmi '+tagDockerApp+' || true'
             } else {
                  currentBuild.result = 'UNSTABLE'
                  return
             }
        }
     }
     
    //Scan Build Artifacts in Xray
    stage('Xray Scan') {
         if (XRAY_SCAN == "YES") {
             def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : false
              ]
              def xrayResults = rtServer.xrayScan xrayConfig
              echo xrayResults as String
         } else {
              println "No Xray scan performed. To enable set XRAY_SCAN = YES"
         }
         sleep 60
     } 
     
    //Promote docker image from staging local repo to production repo in Artifactory 
     stage ('Promote') {
        dir('automation/docker-app/app-test') {
            def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'App works with latest released version of gradle swampup app, tomcat and jdk',
              'sourceRepo'         : 'docker-stage-local',
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
            rtServer.promote promotionConfig
            reTagLatest (PROMOTE_REPO, SERVER_URL)            
        }

        // promote war file from gradle-release to gradle-prod

     }
}

def testApp (tag) {
    docker.image(tag).withRun('-p 9191:8181') {c ->
        sleep 10
        def stdout = sh(script: 'curl "http://localhost:9191/swampup/"', returnStdout: true)
        if (stdout.contains("Welcome Docker Lifecycle Training")) {
            println "*** Passed Test: " + stdout
            return true
        } else {
            println "*** Failed Test: " + stdout
            return false
        }
    }
}
//Tag docker image
def reTagLatest (promote_repo, server_url) {
    def BUILD_NUMBER = env.BUILD_NUMBER
    sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
    sh ("""
      sed -E "s/TARGETREPO/${promote_repo}/g" retag_out.json > retaga_out.json
      """)
    sh 'cat retaga_out.json'
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + server_url
        def regTagStr = curlString +  "/api/docker/${promote_repo}/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
        println "Curl String is " + regTagStr
        sh regTagStr
    }
}

def updateBaseDockerFile (artdocker_registry) {
    def alias = "jfrog.local:5001"
    sh "sed -i 's/${alias}/${artdocker_registry}/' Dockerfile"
}

def createXrayWatch (watch, XRAYURL) {
    def watchConfig = """ {
        "active"      : true,
        "name"        : "${watch}",
        "target_type" : "build",
        "art_id"      : "artCi1",
        "target_name" : "${watch}"
    }"""

    def createWatch = ["curl", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${watchConfig}", "-u", "admin:password", "${XRAYURL}/api/v1/watches"]

    def curlString = "curl -uadmin:password " + "-X GET " + XRAYURL
    def getWatch = curlString +  "/api/v1/watches/${watch}"
    try {
        def getWatchResponse = getWatch.execute().text
        def jsonSlurper = new JsonSlurper()
        def watchexist = jsonSlurper.parseText("${getWatchResponse}")
        if (watchexist.error) {
            def createWatchResponse = createWatch.execute().text
        }
    } catch (Exception e) {
              println "XRay cannot retrieve or create watch information ${e.message}"
              ignoreAlertsCheck = true
    }
}