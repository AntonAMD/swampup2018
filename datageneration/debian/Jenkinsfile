#!/usr/bin/env groovy
import groovy.json.JsonSlurper
import java.util.Random

// Parameters - the following parameters can be exposed using Jenkins Parameters.
//   SIZE = <int>M/K ,Size of single package to generate(before comprassion). default: (random.nextInt(50) + 1).toString() + "M"
//   PNUM = <int> ,Number of packges to generate. default: random.nextInt(2) + 1
//   DEST = <path> ,Destination path to generate the files. default: build-${BUILD_NUMBER}-debian"
//   FNUM = <int>,Size of files in the lowset level. default: ""
//   COMPRESS = 0-9,Compression level of the final packge (0-9). default: ""
//   PROPS = <debian property>,trusty/main/all. default: trusty
//   REPO = <debian repository>,The repository to deploy debian packages. default: "debian-dev-local"
//   DEPTH = <int>,Size of the final packge tree; default: ""
//   DPATH = <path>,The path files will be deployed to. default: "build-${BUILD_NUMBER}-debian"
//   TESTING - build label to use. default: "beta"
//   WATCHNAME - Xray watch name. default: "debian-dev-local (must match REPO)
//   NAMESPACEDOMAIN - <namespace>.<domain name>: default: solutions-us.jfrogbeta.com. The artifactory and XRAY url are derived from this - artifactory-solutions-us.jfrogbeta.com

node {
    def ignoreAlertsCheck = (XRAY_SCAN == "NO") ? true : false
    Random random = new Random()

    def size = (!SIZE.allWhitespace) ? SIZE : (random.nextInt(10) + 1).toString() + "M"
    println "Size used is ${size}"
    def pnum = (!PNUM.allWhitespace) ? PNUM : random.nextInt(2) + 1
    println "Number of packages - pnum : ${pnum}"
    def DEST = "build-${BUILD_NUMBER}-debian"
    def FNUM = "1"
    def COMPRESS = ""
    def PROPS = ""
    def REPO = "debian-dev-local"
    def ARTIUSER = "admin"
    def PASSWORD = "password"
    withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
        PASSWORD = repoPwd
        XRAYPASSWORD = repoPwd
        ARTIUSER = repoUser
    }
    def DEPTH = ""
    def DPATH = "build-${BUILD_NUMBER}-debian"
    def TESTING = "swampup"
    
    def namespace_domain = "${NAMESPACEDOMAIN}"
    def ARTIURL = "http://${namespace_domain}/artifactory"
    def SERVER_URL = "http://${namespace_domain}/artifactory"
    def rtServer = Artifactory.newServer url: SERVER_URL, username: ARTIUSER, password: PASSWORD
    def buildInfo = Artifactory.newBuildInfo()
    def dockerURL = "${namespace_domain}:5001"

  stage ('Generating Debian Data') {
    currentBuild.displayName = TESTING + "-" + BUILD_NUMBER
    withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
       sh 'docker system prune -f'
       sh 'rm -rf /home/jenkins/jenkins_slave/tools/'
       sh "docker login -u ${repoUser} -p ${repoPwd} ${dockerURL}"
       sh "docker pull ${dockerURL}/qa/data/debian-generator:1.2"
       sh "docker run --name debian-generator-$BUILD_NUMBER -v /etc/hosts:/etc/hosts -e PROPS=${PROPS} -e COMMAND=gd -e BUILD_NUMBER=$BUILD_NUMBER -e ARTIURL=${ARTIURL} -e ARTIUSER=${ARTIUSER} -e PASSWORD=${PASSWORD} -e REPO=${REPO} -e DPATH=${DPATH} -e SIZE=${size} -e PNUM=${pnum} -e FNUM=${FNUM} -e COMPRESS=${COMPRESS} ${dockerURL}/qa/data/debian-generator:1.2"
       sh 'docker logs -f debian-generator-$BUILD_NUMBER'
    }
    rtServer.publishBuildInfo buildInfo
  }

  stage ('Check Last File') {
    def server = Artifactory.newServer url: ARTIURL, username: ARTIUSER, password: PASSWORD
    def path = get_path()
    def fileName = get_file(pnum)

    def downloadSpec = """{
      "files": [
        {
          "pattern":"$REPO/$path/$fileName",
          "target": "$fileName",
          "flat": "true"
        }
      ]
    }"""

    for (i = 0; i < 60; i++) {
      server.download (downloadSpec)
      if (fileExists(fileName)) {
        println "Waited $i seconds"
        sh "rm ${fileName}"
        currentBuild.result = 'SUCCESS'
        return
      } else {
          println "Seconds elapsed: " + i
        sleep(1)
      }
    }
    println "Download $path/$fileName failed. "
    currentBuild.result = 'UNSTABLE'
    return
  }

  stage ('Cleanup') {
    sh 'docker rm -vf debian-generator-$BUILD_NUMBER'
  }
}

def get_file (pnum) {
  def ext = "deb"
  return ("gen-deb$pnum-$BUILD_NUMBER.$ext")
}

def get_path () {
  return ("build-$BUILD_NUMBER-debian")
}

