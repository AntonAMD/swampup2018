#!/usr/bin/env groovy
import groovy.json.JsonSlurper
import java.util.Random

// Parameters - the following parameters can be exposed using Jenkins Parameters.
//    size - SIZE = <int>M or K ,Size of single package to generate(before comprassion). example:10M
//    PNUM - PNUM = <int> ,Number of packges to generate
//    DEST - DEST = <path> ,Destination path to generate the files
//    FNUM - FNUM = <int>,Size of files in the lowset level
//    COMPRESS - COMPRESS = 0-9,Compression level of the final packge (0-9)
//    PROPS - PROPS = <debian property>,trusty/main/all
//    REPO - REPO = <debian repository>,The repository to deploy debian packages
//    ARTIUSER - ARTIUSER = <artifactory user>,Artifactory user
//    DEPTH - DEPTH = <int>,Size of the final packge tree
//    DPATH - DPATH = <path>,The path files will be deployed to
//    TESTING - build label
//    WATCHNAME - Xray watch name
//    XRAYPASSWORD -
//    ARTIURL - artifactory url
//    XRAYURL - xray url

node  {
	def ignoreAlertsCheck = (XRAY_SCAN == "NO") ? true : false
	Random random = new Random()

	 def SIZE = (random.nextInt(10) + 1).toString() + "M"
	 def RNUM = random.nextInt(2)
     def PNUM = RNUM + 1
     def NNUM = RNUM + 2
     def DEST = ""
     def FNUM = "1"
     def COMPRESS = ""
     def PROPS = ""
     def REPO = "rpm-dev-local"
     def ARTIUSER = "admin"
     def PASSWORD = "password"
     def DEPTH = ""
     def DPATH = "/${BUILD_NUMBER}/os/x86_64/RPMS/"
     def TESTING = "swampup"

     withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
        PASSWORD = repoPwd
        XRAYPASSWORD = repoPwd
        ARTIUSER = repoUser
     }
     def namespace_domain = "${NAMESPACEDOMAIN}"
     def ARTIURL = "http://${namespace_domain}/artifactory"
     def SERVER_URL = "http://${namespace_domain}/artifactory"
     def rtServer = Artifactory.newServer url: SERVER_URL, username: ARTIUSER, password: PASSWORD
     def buildInfo = Artifactory.newBuildInfo()
     def dockerURL = "${namespace_domain}:5001"

	stage ('Generating Debian Data') {
        //createXrayWatch (WATCHNAME, ignoreAlertsCheck, XRAYURL)
		currentBuild.displayName = TESTING + "-" + BUILD_NUMBER
		withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
		   sh "docker login -u ${repoUser} -p ${repoPwd} ${dockerURL}"
		   sh "docker pull ${dockerURL}/qa/data/rpm-generator:1.2"
		   sh "docker run --name rpm-generator-$BUILD_NUMBER -v /etc/hosts:/etc/hosts -e COMMAND=gd -e BUILD_NUMBER=$BUILD_NUMBER -e ARTIURL=${ARTIURL} -e ARTIUSER=${ARTIUSER} -e PASSWORD=${PASSWORD} -e REPO=${REPO} -e DPATH=${DPATH} -e SIZE=${SIZE} -e PNUM=${PNUM} -e FNUM=${FNUM} ${dockerURL}/qa/data/rpm-generator:1.2"
		   sh 'docker logs -f rpm-generator-$BUILD_NUMBER'
		}
		rtServer.publishBuildInfo buildInfo
	}

	stage ('Check Last File') {
		def server = Artifactory.newServer url: ARTIURL, username: ARTIUSER, password: PASSWORD
		def path = "${BUILD_NUMBER}/os/x86_64/RPMS"
		def ext = "rpm"
	    def nextNum = NNUM
		def fileName = "sample_rpm${PNUM}_${BUILD_NUMBER}-${PNUM}-${nextNum}.x86_64.$ext"

		def downloadSpec = """{
			"files": [
				{
					"pattern":"$REPO/$path/$fileName",
					"target": "$fileName",
					"flat": "true"
				}
			]
		}"""

		for (i = 0; i < 60; i++) {
			server.download (downloadSpec)
			if (fileExists(fileName)) {
				println "Waited $i seconds"
				sh "rm ${fileName}"
				currentBuild.result = 'SUCCESS'
				return
			} else {
			    println "Seconds Elapsed: " + i
				sleep(1)
			}
		}
		println "Download $path/$fileName failed. "
		currentBuild.result = 'UNSTABLE'
		return
	}

	stage ('Cleanup') {
		sh 'docker rm -vf rpm-generator-$BUILD_NUMBER'
	}
}
