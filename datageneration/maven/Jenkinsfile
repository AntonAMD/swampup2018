#!/usr/bin/env groovy
import groovy.json.JsonSlurper
import java.util.Random

// Parameters - the following parameters can be exposed using Jenkins Parameters.
//   unique_packages  - Number of Maven packages to build. default: unique_packages = random.nextInt(2) + 1
//   major_packages   - Number of major packages. default: random.nextInt(2) + 1
//   minor_packages   - Number of minor packages within major packages. default: random.nextInt(2) +1
//   nooffiles        - Number of random files to include in the Maven package.  The FILESIZE parameter specifies the size of each of these files. default: random.nextInt(2) + 1
//   filesize         - Size of each file in Megabytes. default: (random.nextInt(2) + 1).toString() + "M"
//   prefix           - Prefix of the file name to use for the random files. default: "beta"
//   repository       - Repository to deploy artifacts. default: "maven-data-local"
//   type             - type of artifacts {release | snapshot | plugin-release | plugin-snapshot}. default" "release"
//   group_id         - Maven GAVC. default: "org.pom.test.${BUILD_NUMBER}"
//   watchname        - XRAY watch name to monitor the artifacts. Must be the same as repository. default: "maven-data-local"
//   num_of_snapshots - number of snapshot builds. default: 0
//   NAMESPACEDOMAIN - <namespace>.<domain name>: default: solutions-us.jfrogbeta.com. The artifactory and XRAY url are derived from this - artifactory-solutions-us.jfrogbeta.com

node {
    def ignoreAlertsCheck = (XRAY_SCAN == "NO") ? true : false
    Random random = new Random()

    def unique_packages = random.nextInt(2) + 1    // number of packages
    def major_packages = (!MAJOR_PACKAGES.allWhitespace) ? MAJOR_PACKAGES : random.nextInt(2) + 1 
    println "Number of major package used is ${major_packages}"
    def minor_packages = (!MINOR_PACKAGES.allWhitespace) ? MINOR_PACKAGES : random.nextInt(2) + 1
    println "Number of minor package used is ${minor_packages}"
    def nooffiles = random.nextInt(2) + 1
    def filesize = (!FILESIZE.allWhitespace) ? FILESIZE : (random.nextInt(2) + 1).toString() + "M"
    println "FileSize used is ${filesize}"
    def prefix = "beta"
    def repository = "maven-data-local"
    def artifactory_user = "admin"
    def artifactory_password = "password"
    withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
        artifactory_password = repoPwd
        artifactory_user = repoUser
    }
    def type = "release"
    def group_id = "org.pom.test.${BUILD_NUMBER}"
    def namespace_domain = "${NAMESPACEDOMAIN}"
    def artifactory_url = "http://${namespace_domain}/artifactory"
    def TESTING = "swampup"
    def num_of_snapshots = 0
    def SERVER_URL = "http://${namespace_domain}/artifactory"
    def rtServer = Artifactory.newServer url: SERVER_URL, username: artifactory_user, password: artifactory_password
    def buildInfo = Artifactory.newBuildInfo()
    def dockerURL = "${namespace_domain}:5001"

  stage ('Generating Maven Data') {
    //createXrayWatch (WATCHNAME, ignoreAlertsCheck, XRAYURL)
    currentBuild.displayName = TESTING + "-" + BUILD_NUMBER
    withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
       sh 'docker system prune -f'
       sh "docker login -u ${repoUser} -p ${repoPwd} ${dockerURL}"
       sh "docker pull ${dockerURL}/qa/data/maven-generator:1.5"
    }
    sh "docker run --name maven-generator-$BUILD_NUMBER -v /etc/hosts:/etc/hosts --rm -e NUM_UNIQUE_FILE_PER_SIZE=${nooffiles} -e UNIQUE_FILE_SIZE=${filesize} -e UNIQUE_FILE_PREFIX=${prefix} -e POM_TEST_ARTIFACTORY_USER=${artifactory_user} -e POM_TEST_ARTIFACTORY_PASSWORD=${artifactory_password} -e group_id=${group_id} -e repository=${repository} -e artifactory_url=${artifactory_url} -e artifactory_user=${artifactory_user} -e artifactory_password=${artifactory_password} ${dockerURL}/qa/data/maven-generator:1.5 ${unique_packages} ${major_packages} ${minor_packages} ${type} ${num_of_snapshots} 3"
    rtServer.publishBuildInfo buildInfo

  }

  stage ('Check Last File') {
      println "done with data generation - checking for availability of the last file"
    def server = Artifactory.newServer url: artifactory_url, username: artifactory_user, password: artifactory_password
    def path = get_path(unique_packages, major_packages,minor_packages)
    def fileName = get_file(unique_packages, major_packages,minor_packages)

    def downloadSpec = """{
      "files": [
        {
          "pattern":"${repository}/$path/$fileName",
          "target": "$fileName",
          "flat": "true"
        }
      ]
    }"""
        println "Entering loop"
    for (i = 0; i < 60; i++) {
      server.download (downloadSpec)
      println "Try Downloading file "
      if (fileExists(fileName)) {
        println "Waited $i seconds"
        sh "rm ${fileName}"
        currentBuild.result = 'SUCCESS'
        return
      } else {
          println "Seconds Elapsed: " + i
        sleep(1)
      }
    }
    println "Download $path/$fileName failed. "
    currentBuild.result = 'UNSTABLE'
    return
  }
}

def get_file (unique_packages,major_packages,minor_packages ) {
  def ext = "pom"
  def packageCount = unique_packages
  return ("multi$packageCount-$major_packages.$minor_packages.$ext")
}

def get_path (unique_packages, major_packages,minor_packages ) {
    def packageCount = unique_packages
  return ("org/pom/test/$BUILD_NUMBER/multi$packageCount/$major_packages.$minor_packages")
}

