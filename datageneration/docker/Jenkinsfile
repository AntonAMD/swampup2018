#!/usr/bin/env groovy
import groovy.json.JsonSlurper
import java.util.Random

// Parameters - the following parameters can be exposed using Jenkins Parameters.
//   baseIamge - The base image to build the images from. default: busybox
//   SIZE = <int>M/K ,Size of single package to generate(before comprassion). default: (random.nextInt(100) + 1).toString() + "M"
//   PNUM = <int> ,Number of packges to generate. default: random.nextInt(10) + 1
//   NUMOFTAGS - The number of tags per image. default: 1
//   DNAME = sample-docker - The docker image name. default: "sample_docker"
//   NAMESPACE - jfrog - the namespace to push the docker image to. default: "beta"
//   FNUM - Number of files in the lowset level (inside the package created in each layer). default: random.nextInt(10) + 1
//   INUM - Number of images of to build". default: random.nextInt(1) + 1
//   LNUM - Number of layers. default: random.nextInt(10) + 1
//   TESTING - build label to use. default: "beta"
//   WATCHNAME - Xray watch name. default: "docker-stage-local"
//   TAG = 1 - The tag prefix to add to built images. default: 1
//   NAMESPACEDOMAIN - <namespace>.<domain name>: default: solutions-us.jfrogbeta.com. The artifactory and XRAY url are derived from this - artifactory-solutions-us.jfrogbeta.com

node {
    def ignoreAlertsCheck = (XRAY_SCAN == "NO") ? true : false
    Random random = new Random()

    def SIZE = (random.nextInt(10) + 1).toString() + "M"
    def PNUM = random.nextInt(5) + 1
    def NUMOFTAGS = 1
    def DNAME = "sample_docker"
    def REPO = "docker-stage-local"
    def ARTIUSER = "admin"
    def PASSWORD = "password"
    withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
        PASSWORD = repoPwd
        ARTIUSER = repoUser
    }
    def baseImage = "busybox"
    def NAMESPACE = "swampup"
    def namespace_domain = "${NAMESPACEDOMAIN}"
    def ARTIURL = "http://${namespace_domain}/artifactory"
    def TESTING = "swampup"
    def INUM = random.nextInt(1) + 1
    def LNUM = random.nextInt(10) + 1
    def TAG = "latest"
    def DOCKER_REGISTRY = "${namespace_domain}:5001"
    def DOCKERHOSTMAP = ""
    def FNUM = random.nextInt(10) + 1
    def TAGPREFIX = ""
    def SERVER_URL = "http://${namespace_domain}/artifactory"
    def rtServer = Artifactory.newServer url: SERVER_URL, username: ARTIUSER, password: PASSWORD
    def buildInfo = Artifactory.newBuildInfo()
    def dockerURL = "${namespace_domain}:5001"

	stage ('Generating Docker Data') {
		currentBuild.displayName = TESTING + "-" + BUILD_NUMBER
		git url: 'https://github.com/jfrogtraining/binary-content-generator.git', credentialsId: '9866c12a-5455-4a18-9936-d630260ef666'
        sh 'chmod +x  buildSrc/src/main/resources/dind/list.sh'
        sh 'baseImage=$(./buildSrc/src/main/resources/dind/list.sh)'
        sh 'echo $baseImage'

		withCredentials([usernamePassword(credentialsId: CREDENTIALS, passwordVariable: 'repoPwd', usernameVariable: 'repoUser')]) {
           sh 'docker system prune -f'
           sh "docker login -u ${repoUser} -p ${repoPwd} ${dockerURL}"
		   sh "docker pull ${dockerURL}/qa/data/docker-generator:1.2"
		   sh "docker run --privileged --name docker-generator-$BUILD_NUMBER -v /etc/hosts:/etc/hosts -e DOCKERHOSTMAP=${DOCKERHOSTMAP} -e NUMOFTAGS=${NUMOFTAGS} -e DOCKER_REGISTRY=${DOCKER_REGISTRY} -e DNAME=${DNAME} -e baseImage=${baseImage} -e LNUM=${LNUM} -e MODE=bp -e BUILD_NUMBER=$BUILD_NUMBER -e ARTIURL=${ARTIURL} -e ARTIUSER=${ARTIUSER} -e PASSWORD=${PASSWORD} -e REPO=${REPO} -e NAMESPACE=${NAMESPACE} -e SIZE=${SIZE} -e INUM=${INUM} -e FNUM=${FNUM} -e TAG=${TAGPREFIX} ${dockerURL}/qa/data/docker-generator:1.2"
		   sh 'docker logs -f docker-generator-$BUILD_NUMBER'
		}
	    rtServer.publishBuildInfo buildInfo
	}

	stage ('Check Last File') {
		def server = Artifactory.newServer url: ARTIURL, username: ARTIUSER, password: PASSWORD
		def path = get_path(NAMESPACE, INUM)
		def fileName = get_file()

		def downloadSpec = """{
			"files": [
				{
					"pattern":"$REPO/$path/$fileName",
					"target": "$fileName",
					"flat": "true"
				}
			]
		}"""

		for (i = 0; i < 60; i++) {
			server.download (downloadSpec)
			if (fileExists(fileName)) {
				println "Waited $i seconds"
				sh "rm ${fileName}"
				currentBuild.result = 'SUCCESS'
				return
			} else {
			    println "Seconds Elapsed: " + i
				sleep(1)
			}
		}
		println "Download $path/$fileName failed. "
		currentBuild.result = 'UNSTABLE'
		return
	}

	stage ('Cleanup') {
		sh 'docker rm -vf docker-generator-$BUILD_NUMBER'
	}
}

def get_file () {
	def ext = "json"
	return ("manifest.$ext")
}

def get_path (NAMESPACE, INUM) {
	return ("${NAMESPACE}/sample_docker${INUM}-${BUILD_NUMBER}/1.0")
}
